// Package template provides methods to generate go enum file.
package template

import (
	"bytes"
	"go/ast"
	"go/token"
	"strings"
	"text/template"
)

// FileData contains data to generate go file
type FileData struct {
	PackageName string
	TypeName    string
	ConstsType  string
	Consts      []string
}

// tpl contains go file template
var tpl = `// Code generated by enumgen. DO NOT EDIT.

package {{.PackageName}}

import (
	"fmt"
	"errors"
)

func Values() []{{.ConstsType}} {
	return []{{.ConstsType}}{
		{{- range .Consts}}
		{{.}},
		{{- end}}
	}
}

func New(value {{.ConstsType}}) ({{.TypeName}}, error) {
		for _, v := range Values() {
		if value == v {
			return {{.TypeName}}{
				value: value,
			}, nil
		}
	}

	return  {{.TypeName}}{}, errors.New("unknown const name")
}
{{range .Consts}}
func New{{.}}() {{$.TypeName}} {
	return {{$.TypeName}}{
		value: {{.}},
	}
}
{{end}}
func ({{$.TypeName | FirstLetter}} {{.TypeName}}) Value() {{.ConstsType}} {
	return {{$.TypeName | FirstLetter}}.value
}

func ({{$.TypeName | FirstLetter}} {{.TypeName}}) IsEqual({{.TypeName | ToLower}} {{.TypeName}}) bool {
	return {{$.TypeName | FirstLetter}}.Value() == {{.TypeName | ToLower}}.Value()
}
{{range .Consts}}
func ({{$.TypeName | FirstLetter}} {{$.TypeName}}) Is{{.}}() bool {
	return {{$.TypeName | FirstLetter}}.value == {{.}}
}
{{end}}
func ({{$.TypeName | FirstLetter}} {{.TypeName}}) String() string {
	return fmt.Sprint({{$.TypeName | FirstLetter}}.value)
}
`

// GenFileContent generate go file content
func GenFileContent(data FileData) (*bytes.Buffer, error) {
	funcMap := template.FuncMap{
		"ToLower":     strings.ToLower,
		"FirstLetter": firstLetter,
	}
	t := template.Must(template.New("file").Funcs(funcMap).Parse(tpl))

	content := new(bytes.Buffer)
	if err := t.Execute(content, data); err != nil {
		return nil, err
	}

	return content, nil
}

// firstLetter returns first letter in string s in lowercase
func firstLetter(s string) string {
	if len(s) > 0 {
		return strings.ToLower(s[0:1])
	}

	return ""
}

// GetData gets the AST file struct parse it and returns fileData struct containing data to generate go file
func GetData(f *ast.File) FileData {
	var data FileData
	data.PackageName = f.Name.Name

	for _, decl := range f.Decls {
		switch decl := decl.(type) {
		case *ast.GenDecl:
			switch decl.Tok {
			case token.CONST:
				for _, spec := range decl.Specs {
					vspec := spec.(*ast.ValueSpec)
					data.Consts = append(data.Consts, vspec.Names[0].Name)
				}
			case token.TYPE:
				spec := decl.Specs[0]
				tspec := spec.(*ast.TypeSpec)
				switch tspec.Type.(type) {
				case *ast.StructType:
					data.TypeName = tspec.Name.Name

					structType := tspec.Type.(*ast.StructType)
					for _, field := range structType.Fields.List {
						ident := field.Type.(*ast.Ident)
						fieldType := ident.Name

						for _, fieldName := range field.Names {
							if fieldName.Name == "value" {
								data.ConstsType = fieldType
							}
						}
					}
				}
			}
		}
	}

	return data
}
